#!/bin/sh
# postinst script for arrowhead-serviceregistry-sql
#
# see: dh_installdeb(1)

set -e

. /usr/share/debconf/confmodule

MYSQL_SCRIPT="/usr/share/arrowhead/scripts/create_service_registry_db_empty.sql"
SERVICE_NAME="service-registry-sql"
PKG_NAME="arrowhead-serviceregistry-sql"

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package

case "$1" in
    configure)
        echo "Configuring MySQL database..." >&2
        mysql -u root < ${MYSQL_SCRIPT}

        if [ ! -d "/etc/arrowhead/service-registry-sql" ]; then
            mkdir -p /etc/arrowhead/${SERVICE_NAME}
        fi

        db_get arrowhead-common/mysql_password; PASS_DB=$RET
        db_get arrowhead-common/cert_password; PASS_CERT=$RET

        if ! keytool -list \
            -alias ${SERVICE_NAME} \
            -keystore /etc/arrowhead/cert/keystore.p12 \
            -storepass ${PASS_CERT} 2>&1 >/dev/null; then

            keytool -genkeypair \
                -alias ${SERVICE_NAME} \
                -keyalg RSA \
                -keysize 2048 \
                -dname "CN=${SERVICE_NAME}.${CLOUDNAME}.${OPERATOR}.arrowhead.eu, OU=${ORGANISATION}, O=${COMPANY}, C=${COUNTRY}" \
                -validity 3650 \
                -keypass ${PASS_CERT} \
                -keystore /etc/arrowhead/cert/keystore.p12 \
                -storepass ${PASS_CERT} \
                -storetype PKCS12

            keytool -certreq \
                -alias ${SERVICE_NAME} \
                -keypass ${PASS_CERT} \
                -keystore /etc/arrowhead/cert/keystore.p12 \
                -storepass ${PASS_CERT} \
                | keytool -gencert \
                -alias cloud \
                -keypass ${PASS_CERT} \
                -keystore /etc/arrowhead/cert/keystore.p12 \
                -storepass ${PASS_CERT} \
                | keytool -importcert \
                -alias ${SERVICE_NAME} \
                -keypass ${PASS_CERT} \
                -keystore /etc/arrowhead/cert/keystore.p12 \
                -storepass ${PASS_CERT} \
                -noprompt

        fi

        if [ ! -f "/etc/arrowhead/${SERVICE_NAME}/app.properties" ]; then
            /bin/cat <<EOF >/etc/arrowhead/${SERVICE_NAME}/app.properties
# Database parameters
db_user=arrowhead
db_password=${PASS_DB}
db_address=jdbc:mysql://127.0.0.1:3306/arrowhead?useSSL=false

##########################################
# MANDATORY PARAMETERS ONLY IN SECURE MODE
##########################################

# Certificate related paths and passwords
keystore=/etc/arrowhead/cert/keystore.p12
keystorepass=${PASS_CERT}
keypass=${PASS_CERT}
truststore=/etc/arrowhead/cert/truststore.p12
truststorepass=${PASS_CERT}
alias=${SERVICE_NAME}

################################################
# NON-MANDATORY PARAMETERS (defaults are showed)
################################################

# Webserver parameters
address=0.0.0.0
insecure_port=8442
secure_port=8443

# Ping providers background task parameters to remove offline ArrowheadSystems from the Service Registry
# use this feature or not
ping_scheduled=false
# timeout in milliseconds
ping_timeout=5000
# how frequently should the ping happen, in minutes
ping_interval=60

# Remove expired services background task parameters (where the TTL parameter is 0 or less)
# use this feature or not
ttl_scheduled=false
# how frequently the database should be checked for expired services, in minutes
ttl_interval=10
EOF
            chown root:arrowhead /etc/arrowhead/${SERVICE_NAME}/app.properties
            chmod 640 /etc/arrowhead/${SERVICE_NAME}/app.properties
        fi

        if [ ! -f "/etc/arrowhead/${SERVICE_NAME}/log4j.properties" ]; then
            /bin/cat <<EOF >/etc/arrowhead/${SERVICE_NAME}/log4j.properties
# Define the root logger with appender file
log4j.rootLogger=INFO, DB, FILE

# Database related config
# Define the DB appender
log4j.appender.DB=org.apache.log4j.jdbc.JDBCAppender
# Set Database Driver
log4j.appender.DB.driver=com.mysql.jdbc.Driver
# Set Database URL
log4j.appender.DB.URL=jdbc:mysql://127.0.0.1:3306/arrowhead?useSSL=false
# Set database user name and password
log4j.appender.DB.user=arrowhead
log4j.appender.DB.password=${PASS_DB}
# Set the SQL statement to be executed.
log4j.appender.DB.sql=INSERT INTO logs VALUES(DEFAULT,'%d{yyyy-MM-dd HH:mm:ss}','%C','%p','%m')
# Define the layout for file appender
log4j.appender.DB.layout=org.apache.log4j.PatternLayout
# Disable Hibernate verbose logging
log4j.logger.org.hibernate=fatal

# File related config
# Define the file appender
log4j.appender.FILE=org.apache.log4j.FileAppender
# Set the name of the file
log4j.appender.FILE.File=/var/log/arrowhead/${SERVICE_NAME}.log
# Set the immediate flush to true (default)
log4j.appender.FILE.ImmediateFlush=true
# Set the threshold to debug mode
log4j.appender.FILE.Threshold=debug
# Set the append to false, overwrite
log4j.appender.FILE.Append=false
# Define the layout for file appender
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.conversionPattern=%d{yyyy-MM-dd HH:mm:ss}, %C, %p, %m%n
EOF
            chown root:arrowhead /etc/arrowhead/${SERVICE_NAME}/log4j.properties
            chmod 640 /etc/arrowhead/${SERVICE_NAME}/log4j.properties
        fi

        echo "Restarting ${PKG_NAME}..." >&2
        systemctl daemon-reload
        systemctl restart ${PKG_NAME}.service
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
